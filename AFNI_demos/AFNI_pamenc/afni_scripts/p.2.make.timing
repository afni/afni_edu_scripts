#!/bin/tcsh

# ===================== based on S.0.template.txt ======================

# Run @SSwarper for a subject list passed on the command line.
# This would be good to process on a cluster.

# ======================================================================
# init variables and allow command line options:
#    script_dir, study_root_in, study_root_out, deriv_dir,
#    all_subjects, nsubj
# Note that script_dir will need to be set basically every
#      time, since calling 'init_vars' will be universal.

# --------------------------------------------------
# variables to propagate to other scripts (always pass)

# the location of processing scripts
set script_dir = .

# verbosity level
set verb = 0

set redo = 0

# --------------------------------------------------
# variables specifiec to this script

# the name of this script
set prog = `basename $0`

# list of subjects to process
set subj_proc_list = ()

# task
set taskname = pamenc

# processing directory that goes under derivatives
set proc_dir = AFNI_02_$taskname

# ======================================================================
# process command-line arguments
set ac = 1
while ( $ac <= $#argv )
   if ( "$argv[$ac]" == "-help" ) then
      echo "$prog       - use timing_tool.py to convert TSV to AFNI timing"
      echo ""
      echo "usage: $prog [options...] subj subj ..."
      echo ""
      echo "options specific to this script"
      echo ""
      echo "  -proc_dir DIR     : root directory under 'derivates' for results"
      echo "                      default: $proc_dir"
      echo ""
      echo "general options"
      echo ""
      echo "  -help             : show help and exit"
      echo "  -verb LEVEL       : set verbosity level (2 means show commands)"
      echo "                      default: $verb"
      echo "  -redo             : (delete previous and) re-create results"
      echo "  -script_dir DIR   : specify directory of processing scripts"
      echo "                      default: $script_dir"
      echo ""
      exit 0
   else if ( "$argv[$ac]" == "-proc_dir" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** -proc_dir: missing argument"
         exit 1
      endif
      set proc_dir = $argv[$ac]
   else if ( "$argv[$ac]" == "-redo" ) then
      set redo = 1
   else if ( "$argv[$ac]" == "-script_dir" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** -script_dir: missing argument"
         exit 1
      endif
      set script_dir = $argv[$ac]
   else if ( "$argv[$ac]" == "-verb" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** -verb: missing argument"
         exit 1
      endif
      set verb = $argv[$ac]

      # if 2 or more, set echo to see commands
      if ( $verb >= 2 ) set echo
   else
      # everything else should be a subject
      set subj_proc_list = ( $argv[$ac-] )
      break
   endif

   @ ac ++
end

# source the variable init file (to keep them mostly in one place)
# sets: study_root_in, study_root_out, deriv_dir, all_subjects, nsubj
source $script_dir/c.0.init_vars

# ======================================================================
# do some work...

# if subj_proc_list was not initialized, process everyone
if ( $#subj_proc_list == 0 ) then
   set subj_proc_list = ( $all_subjects )
   echo "++ $prog : processing all subjects"
endif
echo "-- $prog : processing $#subj_proc_list subjects"

# output directory will be derivates/$proc_dir
set res_dir = $deriv_dir/$proc_dir
echo "-- $prog : results will go under $res_dir"


# for each subject, mask sure they exist
set missing = 0
set done    = 0
set todo    = 0
set subjs_todo = ()
foreach sid ( $subj_proc_list )
   set timing_in_list = ( ${sid}_task-${taskname}_events.tsv )

   # if redo, delete old
   if ( $redo && -d $res_dir/$sid/timing ) then
      \rm -fr $res_dir/$sid/timing
   endif

   set smiss = 0
   foreach t_in ( $timing_in_list )
      if ( ! -f $study_root_in/$sid/func/$t_in ) then
         echo "** subject $sid missing timing file $t_in"
         @ smiss = 1
         break
      endif
   end

   if ( $smiss ) then
      @ missing += 1
   else if ( -d $res_dir/$sid/timing ) then
      @ done += 1
   else
      set subjs_todo = ( $subjs_todo $sid )
      @ todo += 1
   endif
end

echo "-- $prog subjects: $missing missing, $done already done, $todo todo"

# allow missing subjects?  seems like an error, but there could be reasons
if ( $missing > 0 ) then
   echo "** $prog : will not proceed if any subjects are missing"
   exit 1
endif

if ( $#subjs_todo == 0 ) then
   echo "** $prog : no subjects to process"
   exit 0
endif

# ------------------------------------------------------------
# big finish, do the real work
#
# create both duration modulated and non-modulated timing files
set tempfile = tmp.awk.txt
foreach sid ( $subjs_todo )

   mkdir --parents $res_dir/$sid/timing
   cd $res_dir/$sid

   set tname = ${sid}_task-${taskname}_events.tsv
   set timing_in = $study_root_in/$sid/func/$tname

   # use reaction_time for duration, unless it is not set (n/a),
   # in which case use the full 'duration' field
   # (output prefix is just into the timing directory)
   timing_tool.py -multi_timing_3col_tsv $timing_in     \
        -tsv_labels onset reaction_time trial_type      \
        -tsv_def_dur_label duration                     \
        -write_multi_timing timing/

   # and make an event_list file, for easy perusal
   timing_tool.py -multi_timing timing/times.*.txt \
        -multi_timing_to_event_list GE:ALL timing/events.txt

   echo "++ created timing files for subject $sid"

end


